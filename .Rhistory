}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Tell if you want a plot
plot <- TRUE
if(plot){
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = ""
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"topleft",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
}
# Display infos
View(res_filtered)
# SUMMARIZE ---------------------------------------------------------------
cli::cli_h2("SUMMARIZE")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully (most recent file of the directory)\n")
} else {
stop("No .rds files found in the specified directory")
}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Tell if you want a plot
plot <- TRUE
if(plot){
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = paste0(
"PARAMETERS :      ",
"N = ",
res[[1]]$params$init$N,
"   |   ",
"R_mig = ",
res[[1]]$params$events$r_mig,
"   |   ",
"R_kill = ",
res[[1]]$params$events$r_kill
)
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"topleft",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
}
# Display infos
legend(
"bottomright",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
# SUMMARIZE ---------------------------------------------------------------
cli::cli_h2("SUMMARIZE")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully (most recent file of the directory)\n")
} else {
stop("No .rds files found in the specified directory")
}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Tell if you want a plot
plot <- TRUE
if(plot){
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = paste0(
"PARAMETERS :      ",
"N = ",
res[[1]]$params$init$N,
"   |   ",
"R_mig = ",
res[[1]]$params$events$r_mig,
"   |   ",
"R_kill = ",
res[[1]]$params$events$r_kill
)
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"bottomright",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
}
# Display infos
# SUMMARIZE ---------------------------------------------------------------
cli::cli_h2("SUMMARIZE")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully (most recent file of the directory)\n")
} else {
stop("No .rds files found in the specified directory")
}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Tell if you want a plot
plot <- TRUE
if(plot){
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = paste0(
"PARAMETERS :      ",
"N = ",
res[[1]]$params$init$N,
"   |   ",
"R_mig = ",
res[[1]]$params$events$r_mig,
"   |   ",
"R_kill = ",
res[[1]]$params$events$r_kill
)
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"bottomright",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
}
# Display infos
plot(res_filtered[[1]]$killed_hosts)
plot(res_filtered[[1]]$min)
plot(res_filtered[[1]]$mean)
plot(res_filtered[[1]]$max)
plot(res_filtered[[1]]$total_end)
# Display infos
mean_res <- sum(res_filtered)
seq_along(length(res_filtered))
length(res_filtered)
k = 2
m <- res_filtered[[k-1]] |> as.matrix()
View(m)
# Create mean data-frame
res_mean <- Reduce(`+`, res_filtered) / length(res_filtered)
View(res_mean)
plot(res_mean$mean)
plot(res_mean$max)
plot(res_mean$min)
plot(res_mean$killed_hosts)
?Reduce
# SUMMARIZE ---------------------------------------------------------------
cli::cli_h2("SUMMARIZE")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully (most recent file of the directory)\n")
} else {
stop("No .rds files found in the specified directory")
}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Create a 'mean result' data-frame
mean_res <- Reduce(`+`, res_filtered) / length(res_filtered)
# Generate plots
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = paste0(
"PARAMETERS :      ",
"N = ",
res[[1]]$params$init$N,
"   |   ",
"R_mig = ",
res[[1]]$params$events$r_mig,
"   |   ",
"R_kill = ",
res[[1]]$params$events$r_kill
)
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"bottomright",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
# Display infos
mean_res$min
mean_res$min |> plot()
mean_res$mean |> plot()
mean_res$max |> plot()
# SUMMARIZE ---------------------------------------------------------------
cli::cli_h2("SUMMARIZE")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully (most recent file of the directory)\n")
} else {
stop("No .rds files found in the specified directory")
}
# Print available parameters
cat("------ Available parameters ------\n\n")
available_r_mig  <-  sapply(res, function(x) x$params$events$r_mig) |> unique()
available_r_kill <- sapply(res, function(x) x$params$events$r_kill) |> unique()
cat("r_mig:  ", available_r_mig, "\n")
cat("r_kill: ", available_r_kill, "\n")
# Select from available parameters
selected_r_mig  <- available_r_mig[8]
selected_r_kill <- available_r_kill[1]
# Filter the res list according to choosen r_mig & r_kill
res_filtered <- res[sapply(res, function(x) {
isTRUE(x$params$events$r_mig == selected_r_mig &
x$params$events$r_kill == selected_r_kill)})] |>
lapply(function(x) x$results)
# Create a 'mean result' data-frame
mean_res <- Reduce(`+`, res_filtered) / length(res_filtered)
# Generate plots
tau <- res[[1]]$params$other$tau
predicted_mean <- 1 + (selected_r_mig / selected_r_kill)
my_alpha = 0.4
plot(
x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = paste0(
"PARAMETERS :      ",
"N = ",
res[[1]]$params$init$N,
"   |   ",
"R_mig = ",
res[[1]]$params$events$r_mig,
"   |   ",
"R_kill = ",
res[[1]]$params$events$r_kill
)
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"bottomright",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
# Display infos
# Rmig   = 0.01    +- 20%
# Rkill  = 0.0005  +- 20%
# Nsimul = 30 * 30 * 6
# tau    = 50,000
### Paramètres propres à TE_01
# N   = 10**5
# TE_01 <- readRDS("./RESULTS/TE_01_2024-12-30_17:32:28.rds") # Warning: too big for my computer
### Paramètres propres à TE_03
# N   = 10**4
# TE_03 <- readRDS(filename = "./RESULTS/TE_03_2024-12-20_23:55:27.rds") # Warning: too big for my computer
TE_03 <- ff::read.table.ffdf(file = "./RESULTS/TE_03_ff.qs")
install.packages("fread")
install.packages("data.table")
# Rmig   = 0.01    +- 20%
# Rkill  = 0.0005  +- 20%
# Nsimul = 30 * 30 * 6
# tau    = 50,000
### Paramètres propres à TE_01
# N   = 10**5
# TE_01 <- readRDS("./RESULTS/TE_01_2024-12-30_17:32:28.rds") # Warning: too big for my computer
### Paramètres propres à TE_03
# N   = 10**4
# TE_03 <- readRDS(filename = "./RESULTS/TE_03_2024-12-20_23:55:27.rds") # Warning: too big for my computer
TE_03 <- data.table::fread("./RESULTS/TE_03.qs")
?fread
plot(1:100)
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
# VALIDATE PARAMETERS -----------------------------------------------------
source("./R/validate.R")
validate(params)
# RETREIVING PARAMETERS ---------------------------------------------------
source("./CONFIG/default.R")
taux <- 0
resolution <- 1
# TWEAK PARAMETERS --------------------------------------------------------
source("./R/tweak.R")
custom_r_mig <- seq(from = params$events$r_mig - (params$events$r_mig * taux),
to   = params$events$r_mig + (params$events$r_mig * taux),
length.out = resolution)
custom_r_kill <- seq(from = params$events$r_kill - (params$events$r_kill * taux),
to   = params$events$r_kill + (params$events$r_kill * taux),
length.out = resolution)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
View(params_grid)
# VALIDATE PARAMETERS -----------------------------------------------------
source("./R/validate.R")
validate(params_grid)
# RUN ---------------------------------------------------------------------
source("./R/run_batch_par.R")
