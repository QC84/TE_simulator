x = 1:tau,
y = res_filtered[[1]]$mean,
type = "l",
col =  adjustcolor("darkred", alpha.f = my_alpha),
lwd = 3,
xlab = "Generations",
ylab = "Count",
ylim = c(0, predicted_mean + 10),
main = ""
)
grid()
for (i in 2:length(res_filtered)) {
lines(
x = 1:tau,
y = res_filtered[[i]]$mean,
col = adjustcolor("darkred", alpha.f = my_alpha),
lwd = 2
)
}
abline(h = predicted_mean,
col = "darkgreen",
lwd = 3)
legend(
"topleft",
legend = c("Predicted", "Actual"),
col = c("darkgreen", "darkred"),
lwd = 3,
lty = c(1, 1)
)
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
cli::cli_h2("SIMULATIONS")
batch_results_par <- run_batch_par(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
cli::cli_h2("SIMULATIONS")
# batch_results_par <- run_batch_par(validity,
#                                    params,
#                                    params_grid,
#                                    n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
batch_results_par <- run_batch_par_progressbar(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# batch_results_par <- run_batch_par(validity,
#                                    params,
#                                    params_grid,
#                                    n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
batch_results_par <- run_batch_par_progressbar(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
cli::cli_h2("SIMULATIONS")
# batch_results_par <- run_batch_par(validity,
#                                    params,
#                                    params_grid,
#                                    n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
batch_results_par <- run_batch_par_progressbar(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
cli::cli_h2("SIMULATIONS")
# batch_results_par <- run_batch_par(validity,
#                                    params,
#                                    params_grid,
#                                    n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
batch_results_par <- run_batch_par_progressbar(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# Saving results
current_time <- Sys.time()
saveRDS(object = batch_results_par,
file = paste0("./RESULTS/", substr(gsub(pattern = " ", replacement = "_", x = current_time),1,19), ".rds"))
cat("Results have been saved in ./RESULTS directory\n")
# SUMMARY -----------------------------------------------------------------
cli::cli_h2("SUMMARY")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully\n")
} else {
stop("No .rds files found in the specified directory")
}
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
cli::cli_h2("SIMULATIONS")
batch_results_par <- run_batch_par(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# batch_results_par <- run_batch_par_progressbar(validity,
#                                                params,
#                                                params_grid,
#                                                n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# Saving results
current_time <- Sys.time()
saveRDS(object = batch_results_par,
file = paste0("./RESULTS/", substr(gsub(pattern = " ", replacement = "_", x = current_time),1,19), ".rds"))
cat("Results have been saved in ./RESULTS directory\n")
# SUMMARY -----------------------------------------------------------------
cli::cli_h2("SUMMARY")
# Importing the most recent file of ./RESULTS directory
rds_files <- list.files(path = "./RESULTS", pattern = "\\.rds$", full.names = TRUE)
if (length(rds_files) > 0) {
most_recent_file <- rds_files[which.max(file.info(rds_files)$mtime)]
res <- readRDS(most_recent_file)
cat(most_recent_file, "have been imported succesfully\n")
} else {
stop("No .rds files found in the specified directory")
}
estimate_simulation_duration <- function(params, params_grid, sample_size = 5, n_cores = 1) {
# Randomly sample a subset of parameter combinations
set.seed(123)
sample_indices <- sample(1:nrow(params_grid), min(sample_size, nrow(params_grid)))
sample_grid <- params_grid[sample_indices, ]
# Run the sampling with timing
tic()
sample_results <- run_batch_par(TRUE, params, sample_grid, n_cores)
elapsed_time <- toc(quiet = TRUE)
# Calculate average time per parameter combination
avg_time_per_run <- elapsed_time$toc - elapsed_time$tic
estimated_total_time <- (avg_time_per_run / sample_size) * nrow(params_grid)
# Convert to human-readable format
format_time <- function(seconds) {
hours <- floor(seconds / 3600)
minutes <- floor((seconds %% 3600) / 60)
secs <- round(seconds %% 60)
time_parts <- c()
if (hours > 0) time_parts <- c(time_parts, paste(hours, "hours"))
if (minutes > 0) time_parts <- c(time_parts, paste(minutes, "minutes"))
if (secs > 0) time_parts <- c(time_parts, paste(secs, "seconds"))
return(paste(time_parts, collapse = " "))
}
cat("Estimated total simulation time:", format_time(estimated_total_time), "\n")
cat("Total parameter combinations:", nrow(params_grid), "\n")
cat("Average time per parameter combination:", round(avg_time_per_run / sample_size, 2), "seconds\n")
return(estimated_total_time)
}
# Usage example:
# estimated_duration <- estimate_simulation_duration(params, params_grid, sample_size = 5, n_cores = 4)
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Usage example:
estimated_duration <- estimate_simulation_duration(params, params_grid, sample_size = 5, n_cores = 4)
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
estimate_simulation_duration <- function(params, params_grid, sample_size = 5, n_cores = 1) {
# Randomly sample a subset of parameter combinations
set.seed(123)
sample_indices <- sample(1:nrow(params_grid), min(sample_size, nrow(params_grid)))
sample_grid <- params_grid[sample_indices, ]
# Run the sampling with timing
tic()
sample_results <- run_batch_par(TRUE, params, sample_grid, n_cores)
elapsed_time <- toc(quiet = TRUE)
# Calculate average time per parameter combination
avg_time_per_run <- elapsed_time$toc - elapsed_time$tic
estimated_total_time <- (avg_time_per_run / sample_size) * nrow(params_grid)
# Convert to human-readable format
format_time <- function(seconds) {
hours <- floor(seconds / 3600)
minutes <- floor((seconds %% 3600) / 60)
secs <- round(seconds %% 60)
time_parts <- c()
if (hours > 0) time_parts <- c(time_parts, paste(hours, "hours"))
if (minutes > 0) time_parts <- c(time_parts, paste(minutes, "minutes"))
if (secs > 0) time_parts <- c(time_parts, paste(secs, "seconds"))
return(paste(time_parts, collapse = " "))
}
cat("Estimated total simulation time:", format_time(estimated_total_time), "\n")
cat("Total parameter combinations:", nrow(params_grid), "\n")
cat("Average time per parameter combination:", round(avg_time_per_run / sample_size, 2), "seconds\n")
return(estimated_total_time)
}
# Usage example:
estimated_duration <- estimate_simulation_duration(params, params_grid, sample_size = 5, n_cores = 4)
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
custom_r_mig <- seq(from = params$events$r_mig,
to   = params$events$r_mig + 0.02,
length.out = 3)
custom_r_kill <- seq(from = params$events$r_kill - 0.0002,
to   = params$events$r_kill + 0.0002,
length.out = 3)
params_grid <- tweak(params,
r_mig = custom_r_mig,
r_kil = custom_r_kill)
cat("r_mig will varie from", range(custom_r_mig)[1], "to", range(custom_r_mig)[2], "\n")
cat("r_kill will varie from", range(custom_r_kill)[1], "to", range(custom_r_kill)[2], "\n")
cat("Total:", length(custom_r_mig), "(r_mig) x", length(custom_r_kill), "(r_kill) x", params$other$n_rep, "(replicates)\n\n")
## Validate ---------------------------------------------------------------
cat("------Validate------\n\n")
validity <- FALSE
validity <- params_grid |> validate()
# Parallel run
estimate_simulation_duration <- function(params, params_grid, sample_size = 5, n_cores = 1) {
# Randomly sample a subset of parameter combinations
set.seed(123)
sample_indices <- sample(1:nrow(params_grid), min(sample_size, nrow(params_grid)))
sample_grid <- params_grid[sample_indices, ]
# Run the sampling with timing
tic()
sample_results <- run_batch_par(TRUE, params, sample_grid, n_cores)
elapsed_time <- toc(quiet = TRUE)
# Calculate average time per parameter combination
avg_time_per_run <- elapsed_time$toc - elapsed_time$tic
estimated_total_time <- (avg_time_per_run / sample_size) * nrow(params_grid)
# Convert to human-readable format
format_time <- function(seconds) {
hours <- floor(seconds / 3600)
minutes <- floor((seconds %% 3600) / 60)
secs <- round(seconds %% 60)
time_parts <- c()
if (hours > 0) time_parts <- c(time_parts, paste(hours, "hours"))
if (minutes > 0) time_parts <- c(time_parts, paste(minutes, "minutes"))
if (secs > 0) time_parts <- c(time_parts, paste(secs, "seconds"))
return(paste(time_parts, collapse = " "))
}
cat("Estimated total simulation time:", format_time(estimated_total_time), "\n")
cat("Total parameter combinations:", nrow(params_grid), "\n")
cat("Average time per parameter combination:", round(avg_time_per_run / sample_size, 2), "seconds\n")
return(estimated_total_time)
}
# Usage example:
estimated_duration <- estimate_simulation_duration(params, params_grid, sample_size = 5, n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
cli::cli_h2("SIMULATIONS")
batch_results_par <- run_batch_par(validity,
params,
params_grid,
n_cores = min(parallel::detectCores() - 1, params$other$n_rep))
# Saving results
current_time <- Sys.time()
saveRDS(object = batch_results_par,
file = paste0("./RESULTS/", substr(gsub(pattern = " ", replacement = "_", x = current_time),1,19), ".rds"))
cat("Results have been saved in ./RESULTS directory\n")
# LOCAL FUNCTIONS ---------------------------------------------------------
cli::cli_h2("FUNCTIONS")
r_files <- list.files(path = "./R",
pattern = "*.R",
full.names = TRUE)
for (file in r_files) {
cat(paste0("Sourcing: ", basename(file), "\n"))
source(file)
}
cat("\n")
# PARAMETERS --------------------------------------------------------------
cli::cli_h2("PARAMETERS")
## Load -------------------------------------------------------------------
cat("------Load------\n\n")
source("./CONFIG/default.R")
# Print object name & key values
cat("Retreiving parameters from ./CONFIG/default.R\n\n")
## Tweak ------------------------------------------------------------------
taux <- 20/100
resolution <- 50
params$events$r_mig - (params$events$r_mig * taux)
params$events$r_mig + (params$events$r_mig * taux)
